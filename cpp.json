{
	"if": {
		"prefix": "if",
		"body": [
			"if ($1)",
			"{",
			"\t$2",
			"}",
			"$0"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else",
			"{",
			"\t$1",
			"}",
			"$0"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "elif",
		"body": [
			"else if ($1)",
			"{",
			"\t$2",
			"}",
			"$0"
		],
		"description": "Code snippet for  else if statement"
	},
	"if else": {
		"prefix": "ife",
		"body": [
			"if ($1)",
			"{",
			"\t$2",
			"}",
			"else",
			"{",
			"\t$3",
			"}",
			"$0"
		],
		"description": "Code snippet for if else statement"
	},
	"do": {
		"prefix": "do",
		"body": [
			"do",
			"{",
			"\t$1",
			"} while ($2);",
			"$0"
		],
		"description": "Code snippet for do...while loop"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for while loop"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${MyClass}${ base}",
			"{",
			"public:",
			"\t${MyClass}();",
			"\t${virtual }~${MyClass}();",
			"",
			"private:",
			"\t$0",
			"};"
		],
		"description": "Code snippet for class"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${MyClass}${ base}",
			"{",
			"public:",
			"\t${MyClass}()",
			"\t{",
			"\t}",
			"\t${virtual }~${MyClass}()",
			"\t{",
			"\t}",
			"",
			"private:",
			"\t$0",
			"};"
		],
		"description": "Code snippet for class with inline constructor/destructor"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for ($1;$2;$3)",
			"{",
			"\t$4",
			"}",
			"$0"
		],
		"description": "Code snippet for 'for' loop"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${MyEnum}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for enum"
	},
	"enum class": {
		"prefix": "enum class",
		"body": [
			"enum class ${MyClass}",
			"{",
			"public:",
			"	${MyClass}();",
			"	~${MyClass}();",
			"",
			"private:",
			"	$1",
			"};",
			"",
			"${MyClass}::${MyClass}()",
			"{",
			"}",
			"",
			"${MyClass}::~${MyClass}()",
			"{",
			"}"
		],
		"description": "Code snippet for enum class"
	},
	"namespace": {
		"prefix": "ns",
		"body": [
			"namespace ${MyNamespace}",
			"{",
			"\t$1",
			"} // namespace '${MyNamespace}'"
		],
		"description": "Code snippet for namespace"
	},
	"#ifdef": {
		"prefix": "#ifdef",
		"body": [
			"#ifdef ${DEBUG}",
			"$1",
			"#endif // ${DEBUG}"
		],
		"description": "Code snippet for #ifdef"
	},
	"#ifndef": {
		"prefix": "#ifndef",
		"body": [
			"#ifdef ${1:1}",
			"$2",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef"
	},
	"#ifndef define": {
		"prefix": "#ifndd",
		"body": [
			"#ifdef ${1:1}",
			"#define $1",
			"$0",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef define"
	},
	"#if": {
		"prefix": "#if",
		"body": [
			"#ifdef ${1:0}",
			"$2",
			"#endif // $1"
		],
		"description": "Code snippet for #if"
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${MyStruct}",
			"{",
			"\t$1",
			"};",
			"$0"
		],
		"description": "Code snippet for struct"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${switch_on})",
			"{",
			"$1",
			"default:",
			"break;",
			"}",
			"$0"
		],
		"description": "Code snippet for switch statement"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"{",
			"\t$0",
			"}",
			"catch (${1:const std::exception& e})",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for try catch"
	},
	"catch": {
		"prefix": "catch",
		"body": [
			"catch (const ${1:std::exception}& e})",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for catch"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${MyUnion}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for union"
	},
	"main()":{
		"prefix":"main",
		"body":[
			"int main(int argc,char *argv[])",
			"{",
			"\t$0",
			"\treturn 0;",
			"}"
		]
	},
	"#include <>":{
		"prefix":"#include",
		"body":[
			"#include <$1>",
			"$0"
		],
		"description": "Code snippet for #include <> "
	},
	"#include \"\"":{
		"prefix":"#include",
		"body":[
			"#include \"$1\"",
			"$0"
		],
		"description": "Code snippet for #include \"\" "
	}
}
